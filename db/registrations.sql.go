// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: registrations.sql

package db

import (
	"context"
)

const deleteRegistration = `-- name: DeleteRegistration :exec
DELETE FROM registrations 
WHERE event_id = ? AND user_id = ?
`

type DeleteRegistrationParams struct {
	EventID int64
	UserID  int64
}

func (q *Queries) DeleteRegistration(ctx context.Context, arg DeleteRegistrationParams) error {
	_, err := q.db.ExecContext(ctx, deleteRegistration, arg.EventID, arg.UserID)
	return err
}

const registerEventUser = `-- name: RegisterEventUser :one
INSERT INTO registrations (
    event_id, user_id
) VALUES (
    ?, ?
)
RETURNING id, event_id, user_id, "foreign"
`

type RegisterEventUserParams struct {
	EventID int64
	UserID  int64
}

func (q *Queries) RegisterEventUser(ctx context.Context, arg RegisterEventUserParams) (Registration, error) {
	row := q.db.QueryRowContext(ctx, registerEventUser, arg.EventID, arg.UserID)
	var i Registration
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.UserID,
		&i.Foreign,
	)
	return i, err
}
